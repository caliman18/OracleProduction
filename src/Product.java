
/**
 * @author David Souza
 * @version v. 2.0
 * @since 10/23/2018
 * fileName: Product.java
 * description: Abstract class type called Product that will implement the Item interface.
 */

// Product class that implements Item interface

import java.util.Date;
import java.util.List;

/**
 * Abstract type called Product that will implement the Item interface.
 * Product will implement the basic functionality that all items on a production line should have.
 * Add the following fields to Product:
 * int serialNumber
 * String manufacturer
 * Date manufacturedOn
 * String name
 */

abstract class Product implements Item,Comparable<Item> {

  protected int serialNumber;
  protected String manufacturer;
  protected Date manufacturedOn;
  protected String name;

  // static variable currentProductionNumber required per specification.
  // Integer class variable called currentProductionNumber.
  // This will store the next number to be assigned to serialNumber.

  //private static int currentProductionNumber = 1; code to replace the line bellow
  private static int currentProductionNumber = 1;

  /**
   * Constructor that will take in the name of the product and set this to the field variable name.
   * Assign a serial number from the currentProductionNumber.
   * currentProductionNumber that increments in readiness for the next instance.
   * manufacturedOn is set as the current date and time.
   * @param name used by product constructor
   */
  public Product(String name) {
    this.name = name;
    serialNumber = currentProductionNumber++;
    manufacturedOn = new Date();
    manufacturer = MANUFACTURER;
    //Code to replace the line above
    //private String manufacturer = Item.manufacturer or Item.MANUFACTURER;
  }
  /**
   * Method that will iterate through your Collection and
   * print all the classes of a particular type.
   *
   * @param collection
   * @param specificClass
   */
  public static void printType(List<Product> collection, Class<?> specificClass) {

    // iterating through collection.
    for(Product product: collection) {

      // checking specific class.
      if(specificClass.isInstance(product)) {
        System.out.println(product.toString()+"\n");
      }

    }

  }
  /**
   * Set Method to set Production Number
   * @param productionNumber used by setProductionNumber method
   */
  public void setProductionNumber(int productionNumber) {
    serialNumber = productionNumber;
  }

  /**
   * Set method to set product name
   * @param name used by the setName method
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Get name method
   * @param
   */
  //correct get name
  public String getName() {
    return name;
  }


  /**
   * Get method that gets manufactured date.
   * @return date.
   */

  //warning! vulnerability problem generated by mutable objects.
  public Date getManufactureDate() {
    return manufacturedOn;
  }

  /**
   * Get Serial Number method
   * @return serialNumber
   */
  public int getSerialNumber() {
    return serialNumber;
  }


  /**
   * A toString method that will return the following: (example data shown).
   *@return
   * Manufacturer  : OracleProduction
   * Serial Number : 1
   * Date          : Thu May 14 15:18:43 BST 2015
   * Name          : Product Name
   *
   */
  public String toString() {

    return

        "Manufacturer : " + manufacturer + "\n"
            + "Serial Number : " + serialNumber + "\n"
            + "Date : " + manufacturedOn + "\n"
            + "Name : " + name;

  }

  //for comparing based on names ..step 14

  @Override

  public int compareTo(Item o) {

    return name.compareTo(o.getName());

  }

}




